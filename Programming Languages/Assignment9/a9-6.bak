#lang racket
(require "parenthec.rkt")

(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))

(define value-of-cps
  (lambda (exp env k)
    (union-case exp expr
      [(const expr)
       (let* ([cc k]
              [value-of-expr expr])
         (apply-k cc value-of-expr))]
      [(mult x1 x2)
       (let* ([cc (kt_outer-mult-k x2 env k)]
              [value-of-env env]
              [value-of-x1 x1])
       (value-of-cps value-of-x1 value-of-env cc))]
      [(sub1 x)
       (let* ([cc (kt_sub1-k k)]
              [value-of-env env]
              [value-of-x x])
       (value-of-cps value-of-x value-of-env cc))]
      [(zero x)
       (let* ([cc (kt_zero-k k)]
              [value-of-env env]
              [value-of-x x])
       (value-of-cps value-of-x value-of-env cc))]
      [(if test conseq alt)
       (let* ([cc (kt_if-k conseq alt env k)]
              [value-of-env env]
              [value-of-test test])
       (value-of-cps value-of-test value-of-env cc))]
      [(letcc body)
       (let* ([cc (envmt_extend-env k env)]
              [value-of-k k]
              [value-of-body body])
         (value-of-cps body cc value-of-k))]
      [(throw k-exp v-exp)
       (let* ([cc (kt_throw-outer-k k-exp env)]
              [value-of-env env]
              [value-of-v-exp v-exp])
         (value-of-cps value-of-v-exp value-of-env cc))]
      [(let e body)
       (let* ([cc (kt_let-k body env k)]
              [value-of-env env]
              [value-of-e e])
         (value-of-cps value-of-e value-of-env cc))]
      [(var y)
       (let* ([cc k]
              [value-of-y y]
              [value-of-env env])
         (apply-env value-of-env value-of-y cc))]
      [(lambda body) (let* ([value-of-k k]
                            [cc (clos_make-closure body env)])
                       (apply-k value-of-k cc))]
      [(app rator rand)
       (let* ([cc (kt_app-outer-k rand env k)]
              [value-of-env env]
              [value-of-rator rator])
         (value-of-cps value-of-rator value-of-env cc))])))

(define-union envmt
  (extend-env a^ env^)
  (empty-env))

(define empty-env
  (lambda ()
    `(empty-env)))
 
(define empty-k
  (lambda ()
    `(empty-k)))

(define extend-env
  (lambda (a^ env^)
    `(extend-env ,a^ ,env^)))

(define apply-env
  (lambda (env y k)
    (union-case env envmt
      [(empty-env)(lambda (y)
                     (error 'value-of "unbound identifier"))]
      [(extend-env a^ env^)
       (if (zero? y)
          (apply-k k a^)
          (apply-env env^ (sub1 y) k))])))

(define-union clos
  (make-closure body env))

(define make-closure
  (lambda (body env)
    `(clos ,body ,env)))

(define apply-closure
  (lambda (clo arg k)
    (union-case clo clos
      [(make-closure body env)(value-of-cps body (envmt_extend-env arg env) k)])))

(define inner-mult-k
  (lambda (v1^ k^)
    `(inner-mult-k ,v1^ ,k^)))

(define outer-mult-k
  (lambda (x2^ env^ k^)
    `(outer-mult-k ,x2^ ,env^ ,k^)))

(define sub1-k
  (lambda (k^)
    `(sub1-k ,k^)))

(define zero-k
  (lambda (k^)
    `(zero-k ,k^)))

(define if-k
  (lambda (conseq^ alt^ env^ k^)
    `(if-k ,conseq^ ,alt^ ,env^ ,k^)))

(define throw-inner-k
  (lambda (vv^)
    `(throw-inner-k ,vv^)))

(define throw-outer-k
  (lambda (k-exp^ env^)
    `(throw-outer-k ,k-exp^ , env^)))

(define let-k
  (lambda (body^ env^ k^)
    `(let-k ,body^ ,env^ ,k^)))

(define app-inner-k
  (lambda (clo^ k^)
    `(app-inner-k ,clo^ ,k^)))

(define app-outer-k
  (lambda (rand^ env^ k^)
    `(app-outer-k ,rand^ ,env^ ,k^)))

(define-union kt
  (empty-k)
  (inner-mult-k v1^ k^)
  (outer-mult-k x2^ env^ k^)
  (sub1-k k^)
  (zero-k k^)
  (if-k conseq^ alt^ env^ k^)
  (throw-inner-k vv^)
  (throw-outer-k k-exp^ env^)
  (let-k ,body^ env^ k^)
  (app-inner-k clo^ k^)
  (app-outer-k rand^ env^ k^))

(define apply-k
  (lambda (k v)
    (union-case k kt
      [(empty-k) v]
      [(inner-mult-k v1^ k^)
       (let* ([value-of-k k^]
              [cc (* v1^ v)])
         (apply-k value-of-k cc))]
      [(outer-mult-k x2^ env^ k^)
       (let* ([cc (kt_inner-mult-k v k^)]
              [value-of-env env^]
              [value-of-x2^ x2^])
         (value-of-cps value-of-x2^ value-of-env cc))]
      [(sub1-k k^)
       (let* ([value-of-k k^]
              [cc (sub1 v)])
         (apply-k value-of-k cc))]
      [(zero-k k^)
       (let* ([value-of-k k^]
              [cc (zero? v)])
         (apply-k value-of-k cc))]
      [(if-k conseq^ alt^ env^ k^)
       (let* ([cc v]
              [value-of-k k^]
              [value-of-env env^]
              [value-of-conseq conseq^]
              [value-of-alt alt^])
       (if cc
           (value-of-cps value-of-conseq value-of-env value-of-k)
           (value-of-cps value-of-alt value-of-env value-of-k)))]
      [(throw-inner-k vv^)
       (let* ([cc vv^]
              [value-of-k v])
       (apply-k value-of-k cc))]
      [(throw-outer-k k-exp^ env^)
       (let* ([cc (kt_throw-inner-k v)]
              [value-of-env env^]
              [value-of-k-exp^ k-exp^])
       (value-of-cps value-of-k-exp^ value-of-env cc))]
      [(let-k body^ env^ k^)
       (let* ([cc (envmt_extend-env v env^)]
              [value-of-k k^]
              [value-of-body body^])
       (value-of-cps value-of-body cc value-of-k))]
      [(app-inner-k clo^ k^)
       (let* ([cc v]
              [value-of-k k^]
              [value-of-clo clo^])
       (apply-closure value-of-clo cc value-of-k))]
      [(app-outer-k rand^ env^ k^)
       (let* ([cc (kt_app-inner-k v k^)]
              [value-of-env env^]
              [value-of-rand rand^])
       (value-of-cps value-of-rand value-of-env cc))])))

;; (let ((f (lambda (f)
;;   	      (lambda (n)
;; 	        (if (zero? n) 
;; 		    1
;; 	            (* n ((f f) (sub1 n))))))))
;;   (* (letcc k ((f f) (throw k ((f f) 4)))) 5))
 
(define main 
  (lambda ()
    (value-of-cps 
     (expr_let 
      (expr_lambda
       (expr_lambda 
        (expr_if
         (expr_zero (expr_var 0))
         (expr_const 1)
         (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
      (expr_mult
       (expr_letcc
        (expr_app
         (expr_app (expr_var 1) (expr_var 1))
         (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
       (expr_const 5)))
     (envmt_empty-env)
     (kt_empty-k))))
