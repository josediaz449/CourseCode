#lang racket

;Part 1~

(define last-non-zero
  (lambda (ls)
    (let/cc k
      (letrec
	((last-non-zero
	   (lambda (ls)
	     (cond
	      ;fill in lines here
                [(null? ls) '()]
                [(not(eqv? (car ls) 0))(cons (car ls)(last-non-zero (cdr ls)))]
                [(eqv? (car ls) 0)(k(last-non-zero (cdr ls)))]
  	       ))))
	(last-non-zero ls)))))

;Part 2
(define lookup
  (lambda (var ls)
    (cond
      [(null? ls)#f]
      [(assv var ls)=>(lambda(pr)(cdr pr))]
      [else(lookup var (cdr ls))])))


(define lex
  (lambda (e a)
    (match e
      [`,y
       #:when (symbol? y)
       (if (lookup y a)
       `(var ,(lookup y a))
       `(free-var))]
      [`,n
       #:when (number? n)
       `(const ,n)]
      [`(zero? ,nexp)
       `(zero ,(lex nexp a))]
      [`(if ,test ,conseq ,alt)
       `(if ,(lex test a)
           ,(lex conseq a)
           ,(lex alt a))]
      [`(sub1 ,n)
       `(sub1 ,(lex n a))]
      [`(* ,nexp1 ,nexp2)
       `(mult ,(lex nexp1 a) ,(lex nexp2 a))]
      [`(let ([,x ,e]) ,body)
       `(let ,(lex e a) ,(lex body (cons `(,x . 0) (map (lambda (v) (cons (car v) (add1 (cdr v)))) a))))]
       [`(letcc ,body)
         `(let/cc k ,(lex body (cons `(,body . 0) (map (lambda (v) (cons (car v) (add1 (cdr v)))) a))))]
      [`(throw ,k-exp ,v-exp)
       `(throw ,(lex k-exp a) ,(lex v-exp a))]
      [`(lambda (,x) ,body)
       #:when (symbol? x)
       `(lambda ,(lex body (cons `(,x . 0) (map (lambda (v) (cons (car v) (add1 (cdr v)))) a))))]
      [`(,rator ,rand)
       `(app ,(lex rator a) ,(lex rand a))])))

;Part 3

(define value-of-cps
  (lambda (expr env k)
    (match expr
      [`(const ,expr)
       (apply-k k expr)]
      [`(mult ,x1 ,x2)
       (value-of-cps x1 env (outer-mult-k x2 env k))]
      [`(sub1 ,x)
       (value-of-cps x env (sub1-k k))]
      [`(zero ,x)
       (value-of-cps x env (zero-k k))]
      [`(if ,test ,conseq ,alt)
       (value-of-cps test env (if-k conseq alt env k))]
      [`(letcc ,body) (value-of-cps body (extend-env k env)k)]
      [`(throw ,k-exp ,v-exp)(value-of-cps v-exp env (throw-outer-k k-exp env))]
      [`(let ,e ,body) (value-of-cps e env (let-k body env k))]
      [`(var ,y) (apply-env env y k)]
      [`(lambda ,body) (apply-k k (make-closure body env))]
      [`(app ,rator ,rand) (value-of-cps rator env
                                         (app-outer-k rand env k))])))
 
(define empty-env
  (lambda ()
    `(empty-env)))
 
(define empty-k
  (lambda ()
    `(empty-k)))

(define extend-env
  (lambda (a^ env^)
    `(extend-env ,a^ ,env^)))

(define apply-env
  (lambda (env y k)
    (match env
      [`(empty-env)(lambda (y)
                     (error 'value-of "unbound identifier"))]
      [`(extend-env ,a^ ,env^)
       (if (zero? y)
          (apply-k k a^)
          (apply-env env^ (sub1 y) k))])))

(define make-closure
  (lambda (body env )
    `(clos ,body ,env)))

(define apply-closure
  (lambda (clo arg k)
    (match clo
      [`(clos ,body ,env)(value-of-cps body (extend-env arg env) k)])))

(define inner-mult-k
  (lambda (v1^ k^)
    `(inner-mult-k ,v1^ ,k^)))

(define outer-mult-k
  (lambda (x2^ env^ k^)
    `(outer-mult-k ,x2^ ,env^ ,k^)))

(define sub1-k
  (lambda (k^)
    `(sub1-k ,k^)))

(define zero-k
  (lambda (k^)
    `(zero-k ,k^)))

(define if-k
  (lambda (conseq^ alt^ env^ k^)
    `(if-k ,conseq^ ,alt^ ,env^ ,k^)))

(define throw-inner-k
  (lambda (vv^)
    `(throw-inner-k ,vv^)))

(define throw-outer-k
  (lambda (k-exp^ env^)
    `(throw-outer-k ,k-exp^ , env^)))

(define let-k
  (lambda (body^ env^ k^)
    `(let-k ,body^ ,env^ ,k^)))

(define app-inner-k
  (lambda (clo^ k^)
    `(app-inner-k ,clo^ ,k^)))

(define app-outer-k
  (lambda (rand^ env^ k^)
    `(app-outer-k ,rand^ ,env^ ,k^)))

(define apply-k
  (lambda (k v)
    (match k
      [`(empty-k) v]
      [`(inner-mult-k ,v1^ ,k^)(apply-k k^(* v1^ v))]
      [`(outer-mult-k ,x2^ ,env^ ,k^)(value-of-cps x2^ env^ (inner-mult-k v k^))]
      [`(sub1-k ,k^)(apply-k k^ (sub1 v))]
      [`(zero-k ,k^)(apply-k k^(zero? v))]
      [`(if-k ,conseq^ ,alt^ ,env^ ,k^)(if v (value-of-cps conseq^ env^ k^) (value-of-cps alt^ env^ k^))]
      [`(throw-inner-k ,vv^)(v vv^)]
      [`(throw-outer-k ,k-exp^ ,env^)(value-of-cps k-exp^ env^ (throw-inner-k v))]
      [`(let-k ,body^ ,env^ ,k^)(value-of-cps body^ (extend-env v env^)k^)]
      [`(app-inner-k ,clo^ ,k^)(apply-closure clo^ v k^)]
      [`(app-outer-k ,rand^ ,env^ ,k^)(value-of-cps rand^ env^
                    (app-inner-k v k^))])))
