#lang racket

(require "mk.rkt")

(defrel (apply-Go G e t)
  (fresh (a G^)
    (== `(,a . ,G^) G)
    (fresh (aa da)
      (== `(,aa . ,da) a)
      (conde
       ((== aa e) (== da t))
       ((=/= aa e) (apply-Go G^ e t))))))

(defrel (!- G e t)
  (conde
   ((numbero e) (== 'Nat t))
   ((== t 'Bool)
    (conde
     ((== #t e))
     ((== #f e))))
   ((fresh (ne1 ne2)
      (== `(+ ,ne1 ,ne2) e)
      (== 'Nat t)
      (!- G ne1 'Nat)
      (!- G ne2 'Nat)))
   ((fresh (teste anse elsee)
      (== `(if ,teste ,anse ,elsee) e)
      (!- G teste 'Bool)
      (!- G anse t)
      (!- G elsee t)))
   ((symbolo e) (apply-Go G e t))
   ((fresh (x b)
      (== `(lambda (,x) ,b) e)
      (symbolo x)
      (fresh (tx tb)          
        (== `(,tx -> ,tb) t)
        (!- `((,x . ,tx) . ,G) b tb))))
   ((fresh (e1 arg)
      (== `(,e1 ,arg) e)
      (fresh (targ)
        (!- G e1 `(,targ -> ,t))
        (!- G arg targ))))
   ((fresh (ne)
           (== `(zero? ,ne) e)
           (== 'Bool t)
           (!- G ne 'Nat)))
   ((fresh (ne)
           (== `(sub1 ,ne) e)
           (== 'Nat t)
           (!- G ne 'Nat)))
   ((fresh (e1)
           (== `(not ,e1) e)
           (== 'Bool t)
           (!- G e1 t)))
   ((fresh (ne1 ne2)
      (== `(* ,ne1 ,ne2) e)
      (== 'Nat t)
      (!- G ne1 'Nat)
      (!- G ne2 'Nat)))
   ((fresh (e1 x b)
           (== `(fix ,e1) e)
           (== `(lambda (,x) ,b) e1)
           (!- G b t)))))